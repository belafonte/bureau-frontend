---
import Modal from "@components/Modal.astro";

interface Props {
  media: string[] | undefined;
}

const { media } = Astro.props;
---

<media-list>
  {
    media &&
      media.map((item) =>
        /(.jpe?g|.png|.gif)/.test(item) ? (
          <img class="item" src={item} />
        ) : (
          <video
            class="item"
            src={item}
            autoplay="autoplay"
            muted="muted"
            loop="loop"
          />
        )
      )
  }
  <Modal id="largeContainer">
    <div class="container">
      <img id="largeImage" />
      <video id="largeVideo" controls="controls" muted="muted"></video>
    </div>
  </Modal>
</media-list>

<script>
  class Media extends HTMLElement {
    constructor() {
      super();
    }

    connectedCallback() {
      const observer = new IntersectionObserver(this.handleIntersection, {
        threshold: 1,
      });

      const modal: HTMLDialogElement | null =
        this.querySelector("#largeContainer");

      const targetImage: HTMLImageElement | null =
        this.querySelector("#largeImage");

      const targetVideo: HTMLImageElement | null =
        this.querySelector("#largeVideo");

      if (!(targetImage && targetVideo)) {
        return new Error("Cannot Find Targets");
      }

      const media = this.querySelectorAll<HTMLImageElement>(
        "img.item, video.item"
      );
      media.forEach((element) => {
        observer.observe(element);

        element.addEventListener("click", () => {
          if (element.tagName === "IMG") {
            targetImage.src = element.src;
          } else {
            targetVideo.src = element.src;
          }
          modal?.showModal();
        });
      });
    }

    handleIntersection(
      entries: IntersectionObserverEntry[],
      observer: IntersectionObserver
    ) {
      console.log(entries, observer);
    }
  }
  customElements.define("media-list", Media);
</script>

<style>
  media-list {
    column-count: 2;
    column-gap: 1rem;
    width: 100%;
    display: block;
  }

  .item {
    cursor: pointer;
    margin-bottom: 1rem;
  }

  .container {
    width: 100%;
    height: 100%;
  }
</style>
