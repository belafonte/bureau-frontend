---
export interface Props {
  title: string;
  subtitle?: string | null;
  text?: string | null;
  media?: {
    path: string;
    video: boolean;
    caption: [{ head: string; sub: string }];
  };
}

const { title, subtitle = null, media, text = null } = Astro.props;
---

<page-section>
  <article>
    <div class="heading">
      <h1>{title}</h1>
      {subtitle !== null && <h2>{subtitle}</h2>}
    </div>
    <slot name="media" />
    <!-- <slot name="text"></slot> -->
    {text !== null && <div class="project-description serif" set:html={text} />}
    <slot name="table" />
    <slot name="gallery" />
  </article>
  <div class="section-end">
    <img src="./wave-small.svg" />
  </div>
</page-section>

<script>
  class PageSection extends HTMLElement {
    constructor() {
      super();
    }

    connectedCallback() {
      const observer = new IntersectionObserver(this.handleIntersection, {
        threshold: 0.1,
      });
      observer.observe(this);
    }

    handleIntersection(entries: IntersectionObserverEntry[]) {
      const firstEntry = entries[0];
      if (firstEntry.isIntersecting) {
        firstEntry.target.classList.add("fadeIn");
      }
    }
  }
  customElements.define("page-section", PageSection);
</script>

<style>
  :global(div.project-description p) {
    margin-bottom: 1rem;
  }
  :global(div.project-description p:last-child) {
    margin-bottom: 1rem;
  }

  page-section {
    width: 100%;
    display: inline-block;
    translate: 0 -30px;
    opacity: 0;
  }

  page-section.fadeIn {
    animation-duration: 1s;
    animation-name: fadeIn;
    animation-timing-function: ease;
    opacity: 1;
    translate: 0 0;
  }

  @keyframes fadeIn {
    0% {
      opacity: 0;
      translate: 0 -30px;
    }
    100% {
      opacity: 1;
      translate: 0 0;
    }
  }

  .section-end {
    display: flex;
    justify-content: center;
    margin-top: 4rem;
    margin-bottom: 8rem;
  }

  @media screen and (max-width: 768px) {
    .section-end {
      margin-bottom: 5rem;
    }
  }
</style>
