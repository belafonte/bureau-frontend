---
interface Props {
  id: string;
}

const { id } = Astro.props;
---

<site-modal>
  <dialog id={id}>
    <header></header>
    <main>
      <slot />
    </main>
    <footer>
      <form method="dialog">
        <button><strong>close</strong></button>
      </form>
    </footer>
  </dialog>
</site-modal>

<script>
  class Modal extends HTMLElement {
    constructor() {
      super();
    }

    connectedCallback() {
      const dialog = this.querySelector<HTMLDialogElement>("dialog");

      const config = { attributes: true, childList: false, subtree: false };

      if (!dialog) return new Error("Dialog or Html Element not found");

      const callback: MutationCallback = (mutationList) => {
        for (const mutation of mutationList) {
          if (mutation.attributeName !== "open") return;

          const isOpen = dialog.hasAttribute("open");

          if (isOpen) {
            document.body.style.overflow = "hidden";
          } else {
            document.body.style.overflow = "auto";
          }
        }
      };

      const observer = new MutationObserver(callback);
      observer.observe(dialog, config);
    }
  }
  customElements.define("site-modal", Modal);
</script>

<style>
  header {
    height: 0rem;
    /* background-color: var(--orange); */
    background-color: rgba(0, 0, 0, 0);
    /* margin-bottom: 1rem; */
    margin: 0;
  }

  main {
    margin: 1rem;
    display: flex;
    justify-content: center;
  }

  footer {
    display: flex;
    justify-content: center;
    align-items: center;
  }

  button {
    /* margin: 0.5rem;
    float: right; */
    /* font-size: 2rem !important; */
    /* color: var(--blue) !important;
    font-weight: bold; */

    border-radius: 9999px;
    /* border: 2px solid var(--orange); */
    background-color: var(--orange);
    color: var(--blue);
    padding: 1rem;
    width: 10rem;
    height: 1rem;
    display: flex;
    justify-content: center;
    align-items: center;
  }
  dialog {
    position: fixed;
    max-height: 80vh;
    max-width: 1280px;

    left: 50%;
    top: 50%;
    transform: translate(-50%, -50%);
    border: 0rem solid var(--orange);
    /* background-color: var(--blue); */
    background-color: rgba(0, 0, 0, 0);
    /* padding: 1rem; */
    /* border-radius: 1rem; */
    margin: 0;
    padding: 0;
  }

  @media screen and (max-width: 768px) {
    dialog {
      max-height: 100dvh;
    }
  }

  dialog::backdrop {
    position: fixed;
    top: 0px;
    right: 0px;
    bottom: 0px;
    left: 0px;
    background: rgba(0, 0, 0, 0.5);
    backdrop-filter: blur(50px);
    -webkit-backdrop-filter: blur(50px);
  }
</style>
