<!-- Wrap the component elements in our custom element “astro-heart”. -->
<astro-heart></astro-heart>

<script>
  import { LitElement, html, TemplateResult } from "lit";
  // Define the behaviour for our new type of HTML element.
  class AstroHeart extends LitElement {
    public count: number = 0;
    protected container: HTMLElement | null = null;
    protected template: TemplateResult | null = null;

    constructor() {
      super();
    }

    connectedCallback(): void {
      console.log("Iam connected");
      // Each time the button is clicked, update the count.

      this.container = this.querySelector<HTMLElement>("astro-heart");
      // this.template = (testCount: number) =>
      //   html`<button aria-label="Heart">💜</button> ×
      //     <span>${testCount}</span>`;

      const heartButton = this.querySelector("button");
      const countSpan = this.querySelector("span");

      // heartButton.addEventListener("click", () => {
      //   this.count++;
      //   countSpan.textContent = this.count;
      // });
    }

    render() {
      return html`<p>Hello from my template.</p>`;
    }
  }

  // Tell the browser to use our AstroHeart class for <astro-heart> elements.
  customElements.define("astro-heart", AstroHeart);
</script>
