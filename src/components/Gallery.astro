---
import Modal from "@components/Modal.astro";

interface Props {
  images: string[] | undefined;
}

const { images } = Astro.props;
---

<image-gallery>
  {
    images &&
      images.map((image) =>
        /(.jpe?g|.png|.gif)/.test(image) ? (
          <img class="item" src={image} />
        ) : (
          <video
            class="item"
            src={image}
            autoplay="autoplay"
            muted="muted"
            loop="loop"
          />
        )
      )
  }
  <Modal id="fullscreenContainer">
    <div class="container">
      <img id="fullscreenImage" />
    </div>
  </Modal>
</image-gallery>

<script>
  class Gallery extends HTMLElement {
    constructor() {
      super();
    }

    connectedCallback() {
      const observer = new IntersectionObserver(this.handleIntersection, {
        threshold: 1,
      });

      const modal: HTMLDialogElement | null = this.querySelector(
        "#fullscreenContainer"
      );

      const target: HTMLImageElement | null =
        this.querySelector("#fullscreenImage");

      const images = this.querySelectorAll<HTMLImageElement>("img");
      images.forEach((img) => {
        if (img.id !== "fullscreenImage" && target !== null) {
          observer.observe(img);

          img.addEventListener("click", () => {
            target.src = img.src;
            modal?.showModal();
          });
        }
      });
    }

    handleIntersection(
      entries: IntersectionObserverEntry[],
      observer: IntersectionObserver
    ) {
      console.log(entries, observer);
    }
  }
  customElements.define("image-gallery", Gallery);
</script>

<style>
  image-gallery {
    column-count: 2;
    column-gap: 1rem;
    width: 100%;
    display: block;
  }

  .item {
    cursor: pointer;
    margin-bottom: 1rem;
  }

  .container {
    width: 100%;
    height: 100%;
  }
</style>
