---
import Modal from "@components/Modal.astro";
interface Props {
  path: string | undefined;
  caption?: { head: string; sub: string }[] | undefined;
}

const { path, caption } = Astro.props;

// let media = new
---

<media-element>
  {
    path && /(.jpe?g|.png|.gif)/.test(path) ? (
      <img class="item" src={path} />
    ) : (
      <video class="item" src={path} autoplay loop muted playsinline />
    )
  }

  {
    caption && (
      <div class="caption">
        {caption &&
          caption.map((item) => (
            <div class="item">
              <h3>{item.head}</h3>
              <p set:html={item.sub} />
            </div>
          ))}
      </div>
    )
  }

  <Modal id="modal">
    <div id="slot">
      <!-- <img id="largeImage" />
      <video id="largeVideo" controls="controls" muted="muted"></video> -->
    </div>
  </Modal>
</media-element>

<script>
  class MediaElement extends HTMLElement {
    constructor() {
      super();
    }

    connectedCallback() {
      const observer = new IntersectionObserver(this.handleIntersection, {
        threshold: 0.9,
      });

      const modal: HTMLDialogElement | null = this.querySelector("#modal");

      const slot: HTMLElement | null = this.querySelector("#slot");

      // const targetImage: HTMLImageElement | null =
      //   this.querySelector("#largeImage");

      // const targetVideo: HTMLImageElement | null =
      //   this.querySelector("#largeVideo");

      const mediaElm = this.querySelector<HTMLMediaElement>("img, video");

      if (!(slot && mediaElm)) {
        return new Error("Cannot Find Target and Media Nodes");
      }

      if (mediaElm.tagName === "VIDEO") {
        observer.observe(mediaElm);
      }

      mediaElm.addEventListener("click", () => {
        if (mediaElm.tagName === "IMG") {
          slot.innerHTML = `<img src=${mediaElm.src} alt="Large Image" style="object-fit: contain" />`;
          // targetImage.src = mediaElm.src;
        } else {
          slot.innerHTML = `<video src=${mediaElm.src} alt="Large Image" controls muted style="object-fit: contain"></video>`;
          // targetVideo.src = mediaElm.src;
        }
        modal?.showModal();
      });
    }

    handleIntersection(entries: IntersectionObserverEntry[]) {
      const firstEntry = entries[0];
      if (firstEntry.isIntersecting) {
        (firstEntry.target as HTMLMediaElement).play();
      } else {
        (firstEntry.target as HTMLMediaElement).pause();
      }
    }
  }
  customElements.define("media-element", MediaElement);
</script>

<style>
  .caption {
    margin-top: 1rem;
    column-count: 2;
  }

  .item {
    display: inline-block;
    width: 100%;
    margin-bottom: 0.25rem;
    cursor: pointer;
  }

  #slot {
    max-height: 70vh;
    display: flex;
    justify-content: center;
  }
</style>
